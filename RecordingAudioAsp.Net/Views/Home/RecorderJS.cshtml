@{
	ViewData["Title"] = "Recorder.js";
}

<div class="text-center">
	<h1 class="display-4">Âm thanh của bạn từ Recorder.js</h1>
</div>

<p>Make sure you are using a recent version of Google Chrome.</p>
<p>Also before you enable microphone input either plug in headphones or turn the volume down if you want to avoid ear splitting feedback!</p>

<div class="row">
	<div class="col-sm">
		<div class="text-center">
			<p><strong>audio 1</strong></p>
			<button onclick="startRecording(this, 1);" class="btn btn-primary">Record</button>
			<button onclick="stopRecording(this, 1);" class="btn btn-secondary" disabled>Stop</button>
			<button onclick="deleteAll(1);" class="btn btn-danger">Delete all</button>
			<input type="file" accept="audio/*" capture id="btnAddFile1" class="btn btn-light" />
		</div>

		<h4>Recordings</h4>
		<ol id="recordingslist1"></ol>

		<h4>Log</h4>
		<pre id="log1"></pre>
	</div>
	<div class="col-sm">
		<div class="text-center">
			<p><strong>audio 2</strong></p>
			<button onclick="startRecording(this, 2);" class="btn btn-primary">Record</button>
			<button onclick="stopRecording(this, 2);" class="btn btn-secondary" disabled>Stop</button>
			<button onclick="deleteAll(2);" class="btn btn-danger">Delete all</button>
			<input type="file" accept="audio/*" capture id="btnAddFile2" class="btn btn-light" />
		</div>

		<h4>Recordings</h4>
		<ol id="recordingslist2"></ol>

		<h4>Log</h4>
		<pre id="log2"></pre>
	</div>
</div>

@section Scripts{
	<script>
		var audio_context;
		var recorder1, recorder2;

		function showLog(e, data, i) {
			if (i == 1)
				log1.innerHTML += "\n" + e + " " + (data || '');
			else if (i == 2)
				log2.innerHTML += "\n" + e + " " + (data || '');
			else {
				log1.innerHTML += "\n" + e + " " + (data || '');
				log2.innerHTML += "\n" + e + " " + (data || '');
			}
		}

		function startUserMedia(stream) {
			var input1 = audio_context.createMediaStreamSource(stream);
			var input2 = audio_context.createMediaStreamSource(stream);
			showLog('Media stream created.');

			recorder1 = new Recorder(input1);
			recorder2 = new Recorder(input2);
			showLog('Recorder initialised.');
		}

		function startRecording(button, i) {
			if (i == 1) {
				recorder1 && recorder1.record();
			} else {
				recorder2 && recorder2.record();
			}
			button.disabled = true;
			button.nextElementSibling.disabled = false;
			showLog('Recording...', null, i);
		}

		function stopRecording(button, i) {
			if (i == 1) {
				recorder1 && recorder1.stop();
			} else {
				recorder2 && recorder2.stop();
			}
			showLog('Stopped recording.', null, i);

			button.disabled = true;
			button.previousElementSibling.disabled = false;

			// create WAV download link using audio data blob
			createDownloadLink(i);

			showLog('Stopped recording.', null, i);

			if (i == 1)
				recorder1.clear();
			else
				recorder2.clear();
		}

		function handleAudioEvent(blob, i) {
			var li = document.createElement('li');
			var player = document.createElement('audio');
			var hf = document.createElement('a');
			var br = document.createElement("br");
			var url = URL.createObjectURL(blob);
			player.controls = true;

			player.src = url;
			hf.href = url;
			hf.download = new Date().toISOString() + '.wav';
			hf.innerHTML = hf.download;
			li.appendChild(player);
			li.appendChild(br);
			li.appendChild(hf);
			if (i == 1)
				recordingslist1.appendChild(li);
			else
				recordingslist2.appendChild(li);
		}

		function createDownloadLink(i) {
			if (i == 1)
				recorder1 && recorder1.exportWAV(blob => handleAudioEvent(blob, 1));
			else
				recorder2 && recorder2.exportWAV(blob => handleAudioEvent(blob, 2));
		}

		function deleteAll(i) {
			if (i == 1) {
				recordingslist1.innerHTML = '';
				btnAddFile1.value = '';
			} else {
				recordingslist2.innerHTML = '';
				btnAddFile2.value = '';
			}
		}

		window.onload = function init() {
			try {
				// webkit shim
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
				window.URL = window.URL || window.webkitURL;

				audio_context = new AudioContext;
				showLog('audio context set up.');
				showLog('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
			} catch (e) {
				alert('No web audio support in this browser!');
			}

			navigator.getUserMedia({ audio: true }, startUserMedia, function (e) {
				showLog('No live audio input: ' + e);
			});

			btnAddFile1.addEventListener('change', e => handleAudioEvent(e.target.files[0], 1));
			btnAddFile2.addEventListener('change', e => handleAudioEvent(e.target.files[0], 2));

		};
	</script>

	<script src="~/js/recorder.js"></script>
}