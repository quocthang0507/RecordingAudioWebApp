@{
	ViewData["Title"] = "Recorder.js";
}

<div class="text-center">
	<h1 class="display-4">Âm thanh của bạn từ Recorder.js</h1>
</div>

<p>Make sure you are using a recent version of Google Chrome.</p>
<p>Also before you enable microphone input either plug in headphones or turn the volume down if you want to avoid ear splitting feedback!</p>

<div class="row">
	<div class="col-sm">
		<div class="text-center">
			<p>Audio 1</p>
			<button onclick="startRecording(this, 1);">Record</button>
			<button onclick="stopRecording(this, 1);">Stop</button>
			<button onclick="deleteAll(1);">Delete all</button>
		</div>

		<h4>Recordings</h4>
		<ul id="recordingslist1"></ul>

		<h4>Log</h4>
		<pre id="log1"></pre>
	</div>
	<div class="col-sm">
		<div class="text-center">
			<p>Audio 2</p>
			<button onclick="startRecording(this, 2);">Record</button>
			<button onclick="stopRecording(this, 2);">Stop</button>
			<button onclick="deleteAll(2);">Delete all</button>
		</div>

		<h4>Recordings</h4>
		<ul id="recordingslist2"></ul>

		<h4>Log</h4>
		<pre id="log2"></pre>
	</div>
</div>
<script>
	function __log(e, data, i) {
		if (i == 1)
			log1.innerHTML += "\n" + e + " " + (data || '');
		else if (i == 2)
			log2.innerHTML += "\n" + e + " " + (data || '');
		else {
			log1.innerHTML += "\n" + e + " " + (data || '');
			log2.innerHTML += "\n" + e + " " + (data || '');
		}
	}

	var audio_context;
	var recorder1, recorder2;

	function startUserMedia(stream) {
		var input1 = audio_context.createMediaStreamSource(stream);
		var input2 = audio_context.createMediaStreamSource(stream);
		__log('Media stream created.');

		// Uncomment if you want the audio to feedback directly
		//input.connect(audio_context.destination);
		//__log('Input connected to audio context destination.');

		recorder1 = new Recorder(input1);
		recorder2 = new Recorder(input2);
		__log('Recorder initialised.');
	}

	function startRecording(button, i) {
		if (i == 1) {
			recorder1 && recorder1.record();
		} else {
			recorder2 && recorder2.record();
		}
		button.disabled = true;
		button.nextElementSibling.disabled = false;
		__log('Recording...', null, i);
	}

	function stopRecording(button, i) {
		if (i == 1) {
			recorder1 && recorder1.stop();
		} else {
			recorder2 && recorder2.stop();
		}
		__log('Stopped recording.', null, i);

		button.disabled = true;
		button.previousElementSibling.disabled = false;

		// create WAV download link using audio data blob
		createDownloadLink(i);

		__log('Stopped recording.', null, i);

		if (i == 1)
			recorder1.clear();
		else
			recorder2.clear();
	}

	function createDownloadLink(i) {
		var li = document.createElement('li');
		var au = document.createElement('audio');
		var hf = document.createElement('a');
		var br = document.createElement("br");

		au.controls = true;

		if (i == 1) {
			recorder1 && recorder1.exportWAV(function (blob) {
				var url = URL.createObjectURL(blob);

				au.src = url;
				hf.href = url;
				hf.download = new Date().toISOString() + '.wav';
				hf.innerHTML = hf.download;
				li.appendChild(au);
				li.appendChild(br);
				li.appendChild(hf);
				recordingslist1.appendChild(li);
			});
		} else {
			recorder2 && recorder2.exportWAV(function (blob) {
				var url = URL.createObjectURL(blob);

				au.src = url;
				hf.href = url;
				hf.download = new Date().toISOString() + '.wav';
				hf.innerHTML = hf.download;
				li.appendChild(au);
				li.appendChild(br);
				li.appendChild(hf);
				recordingslist2.appendChild(li);
			});
		}
	}

	function deleteAll(i) {
		if (i == 1)
			recordingslist1.innerHTML = '';
		else
			recordingslist2.innerHTML = '';
	}

	window.onload = function init() {
		try {
			// webkit shim
			window.AudioContext = window.AudioContext || window.webkitAudioContext;
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
			window.URL = window.URL || window.webkitURL;

			audio_context = new AudioContext;
			__log('Audio context set up.');
			__log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
		} catch (e) {
			alert('No web audio support in this browser!');
		}

		navigator.getUserMedia({ audio: true }, startUserMedia, function (e) {
			__log('No live audio input: ' + e);
		});
	};
</script>

<script src="~/js/recorder.js"></script>